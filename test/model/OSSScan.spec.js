/**
 * NASCAR.Data.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NascarDataClient);
  }
}(this, function(expect, NascarDataClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NascarDataClient.OSSScan();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OSSScan', function() {
    it('should create an instance of OSSScan', function() {
      // uncomment below and update the code to test OSSScan
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be.a(NascarDataClient.OSSScan);
    });

    it('should have the property vehicleNumber (base name: "vehicle_number")', function() {
      // uncomment below and update the code to test the property vehicleNumber
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property chassis (base name: "chassis")', function() {
      // uncomment below and update the code to test the property chassis
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsBodyoffsetMin (base name: "limits_bodyoffset_min")', function() {
      // uncomment below and update the code to test the property limitsBodyoffsetMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsBodyoffsetMax (base name: "limits_bodyoffset_max")', function() {
      // uncomment below and update the code to test the property limitsBodyoffsetMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsBodyoffset (base name: "passfails_bodyoffset")', function() {
      // uncomment below and update the code to test the property passfailsBodyoffset
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsBodyoffset (base name: "results_bodyoffset")', function() {
      // uncomment below and update the code to test the property resultsBodyoffset
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberLfMin (base name: "limits_camber_lf_min")', function() {
      // uncomment below and update the code to test the property limitsCamberLfMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberLfMax (base name: "limits_camber_lf_max")', function() {
      // uncomment below and update the code to test the property limitsCamberLfMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsCamberLf (base name: "passfails_camber_lf")', function() {
      // uncomment below and update the code to test the property passfailsCamberLf
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsCamberLf (base name: "results_camber_lf")', function() {
      // uncomment below and update the code to test the property resultsCamberLf
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberLrMin (base name: "limits_camber_lr_min")', function() {
      // uncomment below and update the code to test the property limitsCamberLrMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberLrMax (base name: "limits_camber_lr_max")', function() {
      // uncomment below and update the code to test the property limitsCamberLrMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsCamberLr (base name: "passfails_camber_lr")', function() {
      // uncomment below and update the code to test the property passfailsCamberLr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsCamberLr (base name: "results_camber_lr")', function() {
      // uncomment below and update the code to test the property resultsCamberLr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberRfMin (base name: "limits_camber_rf_min")', function() {
      // uncomment below and update the code to test the property limitsCamberRfMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberRfMax (base name: "limits_camber_rf_max")', function() {
      // uncomment below and update the code to test the property limitsCamberRfMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsCamberRf (base name: "passfails_camber_rf")', function() {
      // uncomment below and update the code to test the property passfailsCamberRf
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsCamberRf (base name: "results_camber_rf")', function() {
      // uncomment below and update the code to test the property resultsCamberRf
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberRrMin (base name: "limits_camber_rr_min")', function() {
      // uncomment below and update the code to test the property limitsCamberRrMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsCamberRrMax (base name: "limits_camber_rr_max")', function() {
      // uncomment below and update the code to test the property limitsCamberRrMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsCamberRr (base name: "passfails_camber_rr")', function() {
      // uncomment below and update the code to test the property passfailsCamberRr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsCamberRr (base name: "results_camber_rr")', function() {
      // uncomment below and update the code to test the property resultsCamberRr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsLfFramerailMin (base name: "limits_lf_framerail_min")', function() {
      // uncomment below and update the code to test the property limitsLfFramerailMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsLfFramerailMax (base name: "limits_lf_framerail_max")', function() {
      // uncomment below and update the code to test the property limitsLfFramerailMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsLfFramerail (base name: "passfails_lf_framerail")', function() {
      // uncomment below and update the code to test the property passfailsLfFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsLfFramerail (base name: "results_lf_framerail")', function() {
      // uncomment below and update the code to test the property resultsLfFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsLrFramerailMin (base name: "limits_lr_framerail_min")', function() {
      // uncomment below and update the code to test the property limitsLrFramerailMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsLrFramerailMax (base name: "limits_lr_framerail_max")', function() {
      // uncomment below and update the code to test the property limitsLrFramerailMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsLrFramerail (base name: "passfails_lr_framerail")', function() {
      // uncomment below and update the code to test the property passfailsLrFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsLrFramerail (base name: "results_lr_framerail")', function() {
      // uncomment below and update the code to test the property resultsLrFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRfFramerailMin (base name: "limits_rf_framerail_min")', function() {
      // uncomment below and update the code to test the property limitsRfFramerailMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRfFramerailMax (base name: "limits_rf_framerail_max")', function() {
      // uncomment below and update the code to test the property limitsRfFramerailMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsRfFramerail (base name: "passfails_rf_framerail")', function() {
      // uncomment below and update the code to test the property passfailsRfFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsRfFramerail (base name: "results_rf_framerail")', function() {
      // uncomment below and update the code to test the property resultsRfFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRhLocationLeftMin (base name: "limits_rh_location_left_min")', function() {
      // uncomment below and update the code to test the property limitsRhLocationLeftMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRhLocationLeftMax (base name: "limits_rh_location_left_max")', function() {
      // uncomment below and update the code to test the property limitsRhLocationLeftMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsRhLocationLeft (base name: "passfails_rh_location_left")', function() {
      // uncomment below and update the code to test the property passfailsRhLocationLeft
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsRhLocationLeft (base name: "results_rh_location_left")', function() {
      // uncomment below and update the code to test the property resultsRhLocationLeft
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRhLocationRightMin (base name: "limits_rh_location_right_min")', function() {
      // uncomment below and update the code to test the property limitsRhLocationRightMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRhLocationRightMax (base name: "limits_rh_location_right_max")', function() {
      // uncomment below and update the code to test the property limitsRhLocationRightMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsRhLocationRight (base name: "passfails_rh_location_right")', function() {
      // uncomment below and update the code to test the property passfailsRhLocationRight
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsRhLocationRight (base name: "results_rh_location_right")', function() {
      // uncomment below and update the code to test the property resultsRhLocationRight
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRhSkewMin (base name: "limits_rh_skew_min")', function() {
      // uncomment below and update the code to test the property limitsRhSkewMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRhSkewMax (base name: "limits_rh_skew_max")', function() {
      // uncomment below and update the code to test the property limitsRhSkewMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsRhSkew (base name: "passfails_rh_skew")', function() {
      // uncomment below and update the code to test the property passfailsRhSkew
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsRhSkew (base name: "results_rh_skew")', function() {
      // uncomment below and update the code to test the property resultsRhSkew
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRrFramerailMin (base name: "limits_rr_framerail_min")', function() {
      // uncomment below and update the code to test the property limitsRrFramerailMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRrFramerailMax (base name: "limits_rr_framerail_max")', function() {
      // uncomment below and update the code to test the property limitsRrFramerailMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsRrFramerail (base name: "passfails_rr_framerail")', function() {
      // uncomment below and update the code to test the property passfailsRrFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsRrFramerail (base name: "results_rr_framerail")', function() {
      // uncomment below and update the code to test the property resultsRrFramerail
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRightParallelMin (base name: "limits_right_parallel_min")', function() {
      // uncomment below and update the code to test the property limitsRightParallelMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsRightParallelMax (base name: "limits_right_parallel_max")', function() {
      // uncomment below and update the code to test the property limitsRightParallelMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsRightParallel (base name: "passfails_right_parallel")', function() {
      // uncomment below and update the code to test the property passfailsRightParallel
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsRightParallel (base name: "results_right_parallel")', function() {
      // uncomment below and update the code to test the property resultsRightParallel
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsTreadwidthFrontMin (base name: "limits_treadwidth_front_min")', function() {
      // uncomment below and update the code to test the property limitsTreadwidthFrontMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsTreadwidthFrontMax (base name: "limits_treadwidth_front_max")', function() {
      // uncomment below and update the code to test the property limitsTreadwidthFrontMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsTreadwidthFront (base name: "passfails_treadwidth_front")', function() {
      // uncomment below and update the code to test the property passfailsTreadwidthFront
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsTreadwidthFront (base name: "results_treadwidth_front")', function() {
      // uncomment below and update the code to test the property resultsTreadwidthFront
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsTreadwidthRearMin (base name: "limits_treadwidth_rear_min")', function() {
      // uncomment below and update the code to test the property limitsTreadwidthRearMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsTreadwidthRearMax (base name: "limits_treadwidth_rear_max")', function() {
      // uncomment below and update the code to test the property limitsTreadwidthRearMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsTreadwidthRear (base name: "passfails_treadwidth_rear")', function() {
      // uncomment below and update the code to test the property passfailsTreadwidthRear
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsTreadwidthRear (base name: "results_treadwidth_rear")', function() {
      // uncomment below and update the code to test the property resultsTreadwidthRear
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsWheelbaseLeftMin (base name: "limits_wheelbase_left_min")', function() {
      // uncomment below and update the code to test the property limitsWheelbaseLeftMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsWheelbaseLeftMax (base name: "limits_wheelbase_left_max")', function() {
      // uncomment below and update the code to test the property limitsWheelbaseLeftMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsWheelbaseLeft (base name: "passfails_wheelbase_left")', function() {
      // uncomment below and update the code to test the property passfailsWheelbaseLeft
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsWheelbaseLeft (base name: "results_wheelbase_left")', function() {
      // uncomment below and update the code to test the property resultsWheelbaseLeft
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsWheelbaseRightMin (base name: "limits_wheelbase_right_min")', function() {
      // uncomment below and update the code to test the property limitsWheelbaseRightMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsWheelbaseRightMax (base name: "limits_wheelbase_right_max")', function() {
      // uncomment below and update the code to test the property limitsWheelbaseRightMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsWheelbaseRight (base name: "passfails_wheelbase_right")', function() {
      // uncomment below and update the code to test the property passfailsWheelbaseRight
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsWheelbaseRight (base name: "results_wheelbase_right")', function() {
      // uncomment below and update the code to test the property resultsWheelbaseRight
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsToeLrMin (base name: "limits_toe_lr_min")', function() {
      // uncomment below and update the code to test the property limitsToeLrMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsToeLrMax (base name: "limits_toe_lr_max")', function() {
      // uncomment below and update the code to test the property limitsToeLrMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsToeLr (base name: "passfails_toe_lr")', function() {
      // uncomment below and update the code to test the property passfailsToeLr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsToeLr (base name: "results_toe_lr")', function() {
      // uncomment below and update the code to test the property resultsToeLr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsToeRrMin (base name: "limits_toe_rr_min")', function() {
      // uncomment below and update the code to test the property limitsToeRrMin
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property limitsToeRrMax (base name: "limits_toe_rr_max")', function() {
      // uncomment below and update the code to test the property limitsToeRrMax
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property passfailsToeRr (base name: "passfails_toe_rr")', function() {
      // uncomment below and update the code to test the property passfailsToeRr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property resultsToeRr (base name: "results_toe_rr")', function() {
      // uncomment below and update the code to test the property resultsToeRr
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

    it('should have the property inspectionDate (base name: "inspection_date")', function() {
      // uncomment below and update the code to test the property inspectionDate
      //var instane = new NascarDataClient.OSSScan();
      //expect(instance).to.be();
    });

  });

}));
