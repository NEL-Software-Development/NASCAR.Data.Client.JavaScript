/**
 * NASCAR.Data.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NascarDataClient);
  }
}(this, function(expect, NascarDataClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NascarDataClient.RunEntry();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RunEntry', function() {
    it('should create an instance of RunEntry', function() {
      // uncomment below and update the code to test RunEntry
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be.a(NascarDataClient.RunEntry);
    });

    it('should have the property driverName (base name: "driver_name")', function() {
      // uncomment below and update the code to test the property driverName
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property driverDetails (base name: "driver_details")', function() {
      // uncomment below and update the code to test the property driverDetails
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property vehicleNumber (base name: "vehicle_number")', function() {
      // uncomment below and update the code to test the property vehicleNumber
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property vehicleDetails (base name: "vehicle_details")', function() {
      // uncomment below and update the code to test the property vehicleDetails
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property ownerName (base name: "owner_name")', function() {
      // uncomment below and update the code to test the property ownerName
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property crewChief (base name: "crew_chief")', function() {
      // uncomment below and update the code to test the property crewChief
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property modelYear (base name: "model_year")', function() {
      // uncomment below and update the code to test the property modelYear
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instane = new NascarDataClient.RunEntry();
      //expect(instance).to.be();
    });

  });

}));
