/**
 * NASCAR.Data.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NascarDataClient);
  }
}(this, function(expect, NascarDataClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NascarDataClient.LoopStat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LoopStat', function() {
    it('should create an instance of LoopStat', function() {
      // uncomment below and update the code to test LoopStat
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be.a(NascarDataClient.LoopStat);
    });

    it('should have the property startingPosition (base name: "starting_position")', function() {
      // uncomment below and update the code to test the property startingPosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property midRacePosition (base name: "mid_race_position")', function() {
      // uncomment below and update the code to test the property midRacePosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property closingLapsPosition (base name: "closing_laps_position")', function() {
      // uncomment below and update the code to test the property closingLapsPosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property closingLapsDiff (base name: "closing_laps_diff")', function() {
      // uncomment below and update the code to test the property closingLapsDiff
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property finishingPosition (base name: "finishing_position")', function() {
      // uncomment below and update the code to test the property finishingPosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property bestPosition (base name: "best_position")', function() {
      // uncomment below and update the code to test the property bestPosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property worstPosition (base name: "worst_position")', function() {
      // uncomment below and update the code to test the property worstPosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property passingDifferential (base name: "passing_differential")', function() {
      // uncomment below and update the code to test the property passingDifferential
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property greenFlagPasses (base name: "green_flag_passes")', function() {
      // uncomment below and update the code to test the property greenFlagPasses
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property greenFlagTimesPassed (base name: "green_flag_times_passed")', function() {
      // uncomment below and update the code to test the property greenFlagTimesPassed
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property qualityPasses (base name: "quality_passes")', function() {
      // uncomment below and update the code to test the property qualityPasses
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property averageRunningPosition (base name: "average_running_position")', function() {
      // uncomment below and update the code to test the property averageRunningPosition
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property percentageQualityPasses (base name: "percentage_quality_passes")', function() {
      // uncomment below and update the code to test the property percentageQualityPasses
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property fastestLap (base name: "fastest_lap")', function() {
      // uncomment below and update the code to test the property fastestLap
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property percentageFastestLaps (base name: "percentage_fastest_laps")', function() {
      // uncomment below and update the code to test the property percentageFastestLaps
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property lapsInTop15 (base name: "laps_in_top15")', function() {
      // uncomment below and update the code to test the property lapsInTop15
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property percentageLapsInTop15 (base name: "percentage_laps_in_top15")', function() {
      // uncomment below and update the code to test the property percentageLapsInTop15
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property lapsLed (base name: "laps_led")', function() {
      // uncomment below and update the code to test the property lapsLed
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property percentageLapsLed (base name: "percentage_laps_led")', function() {
      // uncomment below and update the code to test the property percentageLapsLed
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property lapsCompleted (base name: "laps_completed")', function() {
      // uncomment below and update the code to test the property lapsCompleted
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property fastestOnRestarts (base name: "fastest_on_restarts")', function() {
      // uncomment below and update the code to test the property fastestOnRestarts
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property averageSpeedEarlyRun (base name: "average_speed_early_run")', function() {
      // uncomment below and update the code to test the property averageSpeedEarlyRun
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property averageSpeedLateRun (base name: "average_speed_late_run")', function() {
      // uncomment below and update the code to test the property averageSpeedLateRun
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property averageGreenFlagSpeed (base name: "average_green_flag_speed")', function() {
      // uncomment below and update the code to test the property averageGreenFlagSpeed
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property averageSpeedInTraffic (base name: "average_speed_in_traffic")', function() {
      // uncomment below and update the code to test the property averageSpeedInTraffic
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property driverRating (base name: "driver_rating")', function() {
      // uncomment below and update the code to test the property driverRating
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property racesegment1MPHDifference (base name: "racesegment1_MPH_difference")', function() {
      // uncomment below and update the code to test the property racesegment1MPHDifference
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property racesegment2MPHDifference (base name: "racesegment2_MPH_difference")', function() {
      // uncomment below and update the code to test the property racesegment2MPHDifference
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property racesegment3MPHDifference (base name: "racesegment3_MPH_difference")', function() {
      // uncomment below and update the code to test the property racesegment3MPHDifference
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property racesegment4MPHDifference (base name: "racesegment4_MPH_difference")', function() {
      // uncomment below and update the code to test the property racesegment4MPHDifference
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property totalMPHDifference (base name: "total_MPH_difference")', function() {
      // uncomment below and update the code to test the property totalMPHDifference
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property tookLead (base name: "took_lead")', function() {
      // uncomment below and update the code to test the property tookLead
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

    it('should have the property vehicleNumber (base name: "vehicle_number")', function() {
      // uncomment below and update the code to test the property vehicleNumber
      //var instane = new NascarDataClient.LoopStat();
      //expect(instance).to.be();
    });

  });

}));
