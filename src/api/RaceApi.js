/**
 * NASCAR.Data.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Caution from '../model/Caution';
import DisciplineUpdate from '../model/DisciplineUpdate';
import LapLeader from '../model/LapLeader';
import LoopStat from '../model/LoopStat';
import Pitstop from '../model/Pitstop';
import PracticeRunResults from '../model/PracticeRunResults';
import QualifyingRunResults from '../model/QualifyingRunResults';
import Race from '../model/Race';
import RaceDetails from '../model/RaceDetails';
import RaceInfraction from '../model/RaceInfraction';
import RaceRunResults from '../model/RaceRunResults';
import RaceViewModel from '../model/RaceViewModel';
import RunEntry from '../model/RunEntry';
import StageRunResults from '../model/StageRunResults';
import TeamRoster from '../model/TeamRoster';
import WeekendSchedule from '../model/WeekendSchedule';

/**
* Race service.
* @module api/RaceApi
* @version 1.0
*/
export default class RaceApi {

    /**
    * Constructs a new RaceApi. 
    * @alias module:api/RaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the raceCautionsGet operation.
     * @callback module:api/RaceApi~raceCautionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Caution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceCautionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Caution>}
     */
    raceCautionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [Caution];

      return this.apiClient.callApi(
        '/race/cautions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceDisciplineUpdatesGet operation.
     * @callback module:api/RaceApi~raceDisciplineUpdatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DisciplineUpdate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceDisciplineUpdatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DisciplineUpdate>}
     */
    raceDisciplineUpdatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [DisciplineUpdate];

      return this.apiClient.callApi(
        '/race/discipline-updates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceEntriesGet operation.
     * @callback module:api/RaceApi~raceEntriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RunEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceEntriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RunEntry>}
     */
    raceEntriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [RunEntry];

      return this.apiClient.callApi(
        '/race/entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceGet operation.
     * @callback module:api/RaceApi~raceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RaceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RaceDetails}
     */
    raceGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RaceDetails;

      return this.apiClient.callApi(
        '/race', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceInfractionsGet operation.
     * @callback module:api/RaceApi~raceInfractionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RaceInfraction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceInfractionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RaceInfraction>}
     */
    raceInfractionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [RaceInfraction];

      return this.apiClient.callApi(
        '/race/infractions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceLapLeadersGet operation.
     * @callback module:api/RaceApi~raceLapLeadersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LapLeader>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceLapLeadersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LapLeader>}
     */
    raceLapLeadersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [LapLeader];

      return this.apiClient.callApi(
        '/race/lap-leaders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceLoopStatsGet operation.
     * @callback module:api/RaceApi~raceLoopStatsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LoopStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceLoopStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LoopStat>}
     */
    raceLoopStatsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [LoopStat];

      return this.apiClient.callApi(
        '/race/loop-stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the racePitstopsGet operation.
     * @callback module:api/RaceApi~racePitstopsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Pitstop>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~racePitstopsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Pitstop>}
     */
    racePitstopsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [Pitstop];

      return this.apiClient.callApi(
        '/race/pitstops', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the racePracticeResultsGet operation.
     * @callback module:api/RaceApi~racePracticeResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PracticeRunResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~racePracticeResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PracticeRunResults>}
     */
    racePracticeResultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PracticeRunResults];

      return this.apiClient.callApi(
        '/race/practice-results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceQualifyingResultsGet operation.
     * @callback module:api/RaceApi~raceQualifyingResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QualifyingRunResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceQualifyingResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QualifyingRunResults>}
     */
    raceQualifyingResultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [QualifyingRunResults];

      return this.apiClient.callApi(
        '/race/qualifying-results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceRaceResultsGet operation.
     * @callback module:api/RaceApi~raceRaceResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RaceRunResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceRaceResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RaceRunResults>}
     */
    raceRaceResultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [RaceRunResults];

      return this.apiClient.callApi(
        '/race/race-results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceRostersGet operation.
     * @callback module:api/RaceApi~raceRostersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamRoster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceRostersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamRoster>}
     */
    raceRostersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [TeamRoster];

      return this.apiClient.callApi(
        '/race/rosters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceSeasonGet operation.
     * @callback module:api/RaceApi~raceSeasonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[Race]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceSeasonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[Race]>}
     */
    raceSeasonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'season': opts['season'],
        'series_id': opts['seriesId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [[Race]];

      return this.apiClient.callApi(
        '/race/season', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceStageResultsGet operation.
     * @callback module:api/RaceApi~raceStageResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StageRunResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceStageResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StageRunResults>}
     */
    raceStageResultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [StageRunResults];

      return this.apiClient.callApi(
        '/race/stage-results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceViewmodelGet operation.
     * @callback module:api/RaceApi~raceViewmodelGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RaceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceViewmodelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RaceViewModel}
     */
    raceViewmodelGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RaceViewModel;

      return this.apiClient.callApi(
        '/race/viewmodel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the raceWeekendScheduleGet operation.
     * @callback module:api/RaceApi~raceWeekendScheduleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WeekendSchedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RaceApi~raceWeekendScheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WeekendSchedule>}
     */
    raceWeekendScheduleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'race_id': opts['raceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [WeekendSchedule];

      return this.apiClient.callApi(
        '/race/weekend-schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
